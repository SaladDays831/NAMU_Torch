// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import SceneKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TorchKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class SCNView;

/// <code>TorchGestureManager</code> is a helper class used to take gestures from the user and communicate them to
/// the current <code>TorchProjectNode</code>.  This includes object selection and object manipulation (scale, rotate, and transform).
SWIFT_CLASS("_TtC8TorchKit19TorchGestureManager")
@interface TorchGestureManager : NSObject
/// The global singleton class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TorchGestureManager * _Nonnull shared;)
+ (TorchGestureManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// <code>addGestureRecognizers</code> is used to add the default gesture recognizers needed to recognize object selection and
/// manipulation.
/// \param to The <code>SCNView</code> that is being used to display the Torch Project
///
- (void)addGestureRecognizersTo:(SCNView * _Nonnull)view;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, TorchInitError, closed) {
  TorchInitErrorInvalidApiKey = 0,
  TorchInitErrorUnknown = 1,
};
static NSString * _Nonnull const TorchInitErrorDomain = @"TorchKit.TorchInitError";


/// The <code>TorchKit</code> class is used for global initialization and teardown.
SWIFT_CLASS("_TtC8TorchKit8TorchKit")
@interface TorchKit : NSObject
/// Singleton accessor to TorchKit class.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TorchKit * _Nonnull shared;)
+ (TorchKit * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <code>initSDK</code> must be called before using any other classes, functions or methods in <code>TorchKit</code>, unless otherwise noted
- (BOOL)initSDKWithApiKey:(NSString * _Nonnull)apiKey error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none);
/// <code>shutdownSDK</code> must be called before the application shutdown to perform cleanup.
- (void)shutdownSDK;
@end


SWIFT_CLASS("_TtC8TorchKit19TorchKitSceneIdName")
@interface TorchKitSceneIdName : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8TorchKit25TorchKitSceneObjectIdName")
@interface TorchKitSceneObjectIdName : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ARSessionDelegate;
@protocol MTLDevice;
@class ARSession;
@class NSCoder;

/// <code>TorchProjectNode</code> is the class that loads a <code>.torchkitproj</code> and generates child nodes to execute a Torch project.
/// It handles asset loading and unloading, creating child nodes, and responding to updates in the scene.  However, there are
/// a few support functions that must be called in order for everything to work:
/// <ul>
///   <li>
///     <code>tick</code> must be called once a frame to advance the project state.
///   </li>
///   <li>
///     <code>tap</code> must be called when an object has been tapped.  This is handled automatically if the <code>TorchGestureManager</code> is used.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8TorchKit16TorchProjectNode")
@interface TorchProjectNode : SCNNode
/// The path to the uncompressed project this node has loaded.
@property (nonatomic, copy) NSURL * _Null_unspecified projectPath;
/// If set, any open URL requested made from the Torch project are routed to this
/// callback. Otherwise, the URL is loaded by the system open URL call.
@property (nonatomic, copy) void (^ _Nullable openURLHandler)(NSURL * _Nonnull);
/// If set, any call API requested made from the Torch project are routed to this
/// callback. Otherwise, the API request is made using URLSession.
@property (nonatomic, copy) void (^ _Nullable callAPIHandler)(NSURL * _Nonnull);
/// If set, this callback will be called when the scene changes in the Torch project.
@property (nonatomic, copy) void (^ _Nullable sceneChanged)(TorchKitSceneIdName * _Nonnull);
/// If set, this callback will be called when a trigger is fired in the Torch project.
@property (nonatomic, copy) void (^ _Nullable triggerFired)(TorchKitSceneObjectIdName * _Nonnull);
/// If set, this callback will be called when all of the responses to a trigger have finished.
@property (nonatomic, copy) void (^ _Nullable triggerFinished)(TorchKitSceneObjectIdName * _Nonnull);
/// If the application is using <code>ARKit</code>, the project’s <code>arSessionDelegate</code> methods must be called, either by
/// setting the <code>ARSession.delegate</code> to <code>TorchProjectNode.arSessionDelegate</code> or by calling the delegate methods
/// from the application’s ARSessionDelegate implementation.
@property (nonatomic, readonly, strong) id <ARSessionDelegate> _Nullable arSessionDelegate;
/// This returns the list of scenes in the project.
@property (nonatomic, copy) NSArray<TorchKitSceneIdName *> * _Nonnull scenes;
/// This is the currently displayed scene in the project.
@property (nonatomic, readonly, strong) TorchKitSceneIdName * _Nonnull currentScene;
/// This is a list of all of the triggers in a project.
@property (nonatomic, readonly, copy) NSArray<TorchKitSceneObjectIdName *> * _Nonnull projectTriggers;
/// This is a list of all of the triggers in the current scene.
@property (nonatomic, readonly, copy) NSArray<TorchKitSceneObjectIdName *> * _Nonnull currentSceneTriggers;
/// <code>init</code> is called to initialize a new <code>TorchProjectNode</code>.
/// \param withProjectURL <code>URL</code> pointing to the <code>.torchkitproj</code> to load.  Only local file URL’s are supported at the moment.
///
/// \param andDevice The Metal device used for rendering, this can be grabbed from the SCNView normally.
///
/// \param arSession The current <code>ARSession</code> from <code>ARKit</code>, can be null if <code>ARKit</code> is not being used.
///
- (nullable instancetype)initWithProjectURL:(NSURL * _Nonnull)projectURL andDevice:(id <MTLDevice> _Nonnull)device arSession:(ARSession * _Nullable)arSession error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Call <code>closeProject</code> after the application is done displaying this Torch Project to cleanup resources.  It is automatically
/// called during <code>deinit</code>.
- (void)closeProject;
/// <code>tick</code> advances the project state. It should be called from <code>SCNSceneRendererDelegate</code> <code>renderer(_:updateAtTime:)</code> method.
/// \param delta The change in time from the last tick.  Units are seconds.
///
/// \param cameraTransform The current camera transform, can be passed directly from <code>arSession.currentFrame.camera.transform</code> if using ARKit.
///
/// \param currentGazedNode The <code>SCNNode</code> that the camera is currently pointing at.  Use the <code>.hitTest</code> method on <code>SCNScene</code> to find this node.
///
- (void)tickWithDelta:(double)delta cameraTransform:(simd_float4x4)cameraTransform currentGazedNode:(SCNNode * _Nullable)currentGazedNode;
/// <code>tap</code> should be called when an <code>SCNNode</code> has been tapped by the user. This is handled automatically if <code>TorchGestureManager</code> is used.
- (void)tapWithNode:(SCNNode * _Nonnull)node;
/// <code>setSceneById</code> sets the current scene using the id field of <code>TorchKitScene</code>.
/// \param sceneId The scene id to switch to
///
/// \param resetCurrentScene If true, the current scene’s state will be reset to its initial state.
///
- (void)setSceneWithSceneId:(NSString * _Nonnull)sceneId resetCurrentScene:(BOOL)resetCurrentScene;
/// <code>setSceneByName</code> sets the current scene using the name field of <code>TorchKitScene</code>.
/// \param sceneName The name of the scene to switch to, if there are multiple scenes with the same name it will select the first one.
///
/// \param resetCurrentScene If true, the current scene’s state will be reset to its initial state.
///
- (void)setSceneWithSceneName:(NSString * _Nonnull)sceneName resetCurrentScene:(BOOL)resetCurrentScene;
- (void)resetSceneWithSceneId:(NSString * _Nonnull)sceneId;
/// <code>fireTriggerById</code> will manually fire trigger and cause the interaction associated with the trigger to run.
/// \param triggerId The id of the trigger to fire.
///
- (void)fireTriggerWithTriggerId:(NSString * _Nonnull)triggerId;
/// <code>fireTriggerByName</code> will manually fire trigger and cause the interaction associated with the trigger to run.
/// \param triggerName The name of the trigger to fire.
///
- (void)fireTriggerWithTriggerName:(NSString * _Nonnull)triggerName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>TorchSceneNode</code> maps directly to an object in a Torch project.
SWIFT_CLASS("_TtC8TorchKit14TorchSceneNode")
@interface TorchSceneNode : SCNNode
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC8TorchKit20TorchSceneObjectNode")
@interface TorchSceneObjectNode : TorchSceneNode
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end




/// :nodoc:
SWIFT_CLASS("_TtC8TorchKit18TorchSceneRootNode")
@interface TorchSceneRootNode : TorchSceneNode
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
